/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class App {
    private final List<Integer> input;

    public App(List<Integer> input) {
        this.input = input;
    }

    public Integer getSolutionPart1() {

        int counter = 0;
        int prev = Integer.MIN_VALUE;

        for (Integer current : input) {
            if (prev == Integer.MIN_VALUE) {
                prev = current;
                continue;
            }
            if (current > prev) {
                counter++;
            }
            prev = current;
        };

        return counter;
    }

    public Integer getSolutionPart2() {
        int counter = 0;
        Integer prev = windowOfThree(0);
        if (prev == null) {
            return 0;
        }
        for (int i = 1; i < input.size(); i++) {
            Integer current = windowOfThree(i);

            if (current == null) {
                break;
            }
            if (current > prev) {
                counter++;
            }
            prev = current;
        }

        return counter;
    }

    private Integer windowOfThree(int index) {
        if (index + 2 > input.size() - 1) {
            return null;
        }

        return input.get(index) + input.get(index + 1) + input.get(index + 2);
    }


    public static void main(String[] args) throws IOException {
        System.out.println("java");
        List<Integer> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new App(input).getSolutionPart2());
        else
            System.out.println(new App(input).getSolutionPart1());
    }

    private static List<Integer> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
                .map(Integer::parseInt)
                .collect(Collectors.toList());
    }
}
