/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.function.BiFunction;
import java.util.stream.Collectors;

public class AppDay3 {
    private final List<String> input;

    public AppDay3(List<String> input) {
            this.input = input;
        }

    public int getSolutionPart1() {
        int numberOfBits = input.get(0).length();
        StringBuilder gamma = new StringBuilder();
        for (int i = 0; i < numberOfBits; i++) {
            String samples = gatherOnePosition(i);
            gamma.append(countOccurences(samples, "1") > input.size() / 2 ? "1" : "0");
        }
        StringBuilder epsilon = new StringBuilder();
        for (int i = 0; i < numberOfBits; i++) {
            String samples = gatherOnePosition(i);
            epsilon.append(countOccurences(samples, "0") > input.size() / 2 ? "1" : "0");
        }

        return bitsToInt(gamma.toString()) * bitsToInt(epsilon.toString());
    }

    public int getSolutionPart2() {

        String oxygen = findTheOne(input, 0, (ones, zeros) -> ones.size() >= zeros.size());
        String co2 = findTheOne(input, 0, (ones, zeros) -> ones.size() < zeros.size());

        return bitsToInt(oxygen) * bitsToInt(co2);
    }

    private String findTheOne(List<String> current, int position, BiFunction<List<String>, List<String>, Boolean> selector) {

        List<String> ones = selectOnNumbersInPosition(current, "1", position);
        List<String> zeros = selectOnNumbersInPosition(current, "0", position);

        List<String> reduced = (selector.apply(ones, zeros) ? ones : zeros);

        if (reduced.size() == 1) {
            return reduced.get(0);
        }

        if (reduced.isEmpty()) {
            throw new IllegalStateException("Lilla stumpan ramla bom på stjärten!");
        }
        return findTheOne(reduced, position + 1, selector);
    }

    private List<String> selectOnNumbersInPosition(List<String> current, String number, int position) {
        return current.stream().filter(item -> item.substring(position, position + 1).equalsIgnoreCase(number)).collect(Collectors.toList());
    }

    private String gatherOnePosition(int position) {
        StringBuilder result = new StringBuilder();
        for (String entry : input) {
            result.append(entry, position, position + 1);
        }
        return result.toString();
    }

    private int bitsToInt(String bits) {
        int result = 0;
        int foo = 1;
        char[] chars = bits.toCharArray();

        for (int i = bits.length() - 1; i >= 0 ; i--) {
            if (chars[i] == '1') {
                result += foo;
            }

            foo *= 2;
        }

        return result;
    }

    private int countOccurences(String subject, String sample) {
        return subject.length() - subject.replaceAll(sample, "").length();
    }

    public static void main(String[] args) throws IOException {
        System.out.println("java");
        List<String> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new AppDay3(input).getSolutionPart2());
        else
            System.out.println(new AppDay3(input).getSolutionPart1());
    }

    private static List<String> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
                .collect(Collectors.toList());
    }
}
